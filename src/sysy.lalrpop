use crate::ast;
grammar;

// Skip whitespace and comments
match {
    r"\s*"=>{},
    r"//[^\n\r]*[\n\r]*"=>{},
    r"/\*(\*[^/]|[^\*])*\*/"=>{},
    _
}

// CompUnit ::= [CompUnit] (Decl | FuncDef);
pub CompUnit:Box<ast::CompUnit> = {
    CompUnit? Decl => Box::new(ast::CompUnit::Decl(<>)),
    CompUnit? FuncDef => Box::new(ast::CompUnit::FuncDef(<>)),
};

// Decl ::= ConstDecl | VarDecl;
Decl:ast::Decl = {
    ConstDecl => ast::Decl::ConstDecl(<>),
    VarDecl => ast::Decl::VarDecl(<>),
};

// ConstDecl ::= "const" BType ConstDef {"," ConstDef} ";";
ConstDecl:ast::ConstDecl = {
    "const" <const_type:Type> <const_def:ConstDef> <mut const_defs:("," <ConstDef> )*> ";" =>{
        const_defs.insert(0,const_def);
        ast::ConstDecl{
            const_type,
            const_defs,
        }
    }
};


// ConstDef ::= IDENT {"[" ConstExp "]"} "=" ConstInitVal;
ConstDef:ast::ConstDef = {
    <const_ident:Ident> <const_exps:("[" <ConstExp> "]")*> "=" <const_init_val:ConstInitVal> =>{
        ast::ConstDef{
            const_ident,
            const_exps,
            const_init_val,
        }
    }
};

// ConstInitVal ::= ConstExp | "{" [ConstInitVal {"," ConstInitVal}] "}";
ConstInitVal:ast::ConstInitVal = {
    ConstExp => ast::ConstInitVal::ConstExp(<>),
    "{" <const_init_val_tuple:(ConstInitVal ("," <ConstInitVal>)*)?> "}" => {
        if let Some(const_init_val_tuple) = const_init_val_tuple{
            let (const_init_val,mut const_init_vals) = const_init_val_tuple;
            const_init_vals.push(const_init_val);
            ast::ConstInitVal::ConstInitVal(Some(const_init_vals))
        }else{
            ast::ConstInitVal::ConstInitVal(None)
        }  
    }
};

// VarDecl ::= BType VarDef {"," VarDef} ";";
VarDecl:ast::VarDecl = {
    <var_type:Type> <var_def:VarDef> <mut var_defs:("," <VarDef>)*> ";"=>{
        var_defs.insert(0,var_def);
        ast::VarDecl{
            var_type,
            var_defs,
        }
    }
};

// VarDef ::= IDENT {"[" ConstExp "]"}
// | IDENT {"[" ConstExp "]"} "=" InitVal;
VarDef:ast::VarDef = {
    <ident:Ident> <const_exps:("[" <ConstExp> "]")*> =>{
        ast::VarDef::VarDef(ident,const_exps)
    },
    <ident:Ident> <const_exps:("[" <ConstExp> "]")*> "=" <init_val:InitVal> =>{
        ast::VarDef::InitVal(ident,const_exps,init_val)
    },
};

// InitVal ::= Exp | "{" [InitVal {"," InitVal}] "}";
InitVal:ast::InitVal = {
    Exp => ast::InitVal::Exp(<>),
    "{" <init_val_tuple:(InitVal ("," <InitVal>)*)?> "}" => {
        if let Some(init_val_tuple) = init_val_tuple{
            let (init_val,mut init_vals) = init_val_tuple;
            init_vals.push(init_val);
            ast::InitVal::InitVal(Some(init_vals))
        }else{
            ast::InitVal::InitVal(None)
        }
    }
};

// Expect: FuncDef ::= FuncType IDENT "(" [FuncFParams] ")" Block;
// Now: FuncDef ::= FuncType IDENT "()" Block;
FuncDef:ast::FuncDef = {
    <func_type:Type> <func_ident:Ident> "(" ")" <block:Block> => ast::FuncDef{<>},
};

// FuncType ::= "void" | "int";
Type:ast::Type = {
    "int" => ast::Type::Int,
    "void" => ast::Type::Void,
};  

// Block ::= "{" {BlockItem} "}";
Block:ast::Block = {
    "{" <block_items:BlockItem*> "}" => ast::Block{<>},
};

// BlockItem ::= Decl | Stmt;
BlockItem:ast::BlockItem = {
    Decl => ast::BlockItem::Decl(<>),
    Stmt => ast::BlockItem::Stmt(<>),
};

// Stmt ::= MatchedStmt | UnmatchedStmt
Stmt:ast::Stmt = {
    MatchedStmt => <>,
    UnmatchedStmt => <>,
};

// MatchedStmt ::= AssignStmt
// | ExpStmt
// | BlockStmt
// | BreakStmt//TODO
// | ContinueStmt//TODO
// | RetStmt
// | "if" "(" Exp ")" MatchedStmt "else" MatchedStmt
// | "while" "(" Exp ")" MatchedStmt;//TODO
MatchedStmt:ast::Stmt = {
    AssignStmt => ast::Stmt::AssignStmt(<>),
    ExpStmt => ast::Stmt::ExpStmt(<>),
    BlockStmt => ast::Stmt::BlockStmt(<>),
    RetStmt => ast::Stmt::RetStmt(<>),
    "if" "(" <cond_exp:Exp> ")" <then_stmt:MatchedStmt> "else" <else_stmt:MatchedStmt> =>{
        ast::Stmt::IfStmt(Box::new(ast::IfStmt{cond_exp,then_stmt,else_stmt:Some(else_stmt)}))
    },
};

// UnmatchedStmt ::= "if" "(" Exp ")" Stmt
// | "if" "(" Exp ")" MatchedStmt "else" UnmatchedStmt
// | "while" "(" Exp ")" UnmatchedStmt;//TODO
UnmatchedStmt:ast::Stmt = {
    "if" "(" <cond_exp:Exp> ")" <then_stmt:Stmt> =>{
        ast::Stmt::IfStmt(Box::new(ast::IfStmt{cond_exp,then_stmt,else_stmt:None}))
    },
    "if" "(" <cond_exp:Exp> ")" <then_stmt:MatchedStmt> "else" <else_stmt:UnmatchedStmt> =>{
        ast::Stmt::IfStmt(Box::new(ast::IfStmt{cond_exp,then_stmt,else_stmt:Some(else_stmt)}))
    },
};


// BlockStmt ::= Block;
BlockStmt:ast::BlockStmt = {
    <block:Block> => ast::BlockStmt{<>},
};

// RetStmt ::= "return" [Exp] ";";
RetStmt:ast::RetStmt = {
    "return" <exp:Exp?> ";" => ast::RetStmt{<>},
};

// ExpStmt ::= [Exp] ";";
ExpStmt:ast::ExpStmt = {
    <exp:Exp?> ";" => ast::ExpStmt{<>},
}

// AssignStmt ::= LVal "=" Exp ";"
AssignStmt:ast::AssignStmt = {
    <l_val:LVal> "=" <exp:Exp> ";" => ast::AssignStmt{<>},
};

// LVal ::= IDENT {"[" Exp "]"};
LVal:ast::LVal = {
    <ident:Ident> <exps:("[" <Exp> "]")*> => {
        ast::LVal{<>}
    }
};

// ConstExp ::= Exp;
ConstExp:ast::ConstExp = {
    <exp:Exp> => ast::ConstExp{<>},
};

// Exp ::= LOrExp;
Exp:ast::Exp = {
    LOrExp => ast::Exp{
        l_or_exp: Box::new(<>),
    },
};

// LOrExp ::= LAndExp | LOrExp "||" LAndExp;
LOrExp:ast::LOrExp = {
    LAndExp => ast::LOrExp::LAndExp(<>),
    <l_or_exp:LOrExp> "||" <l_and_exp:LAndExp> =>ast::LOrExp::BinaryOp(Box::new(l_or_exp),l_and_exp),
};

// LAndExp ::= EqExp | LAndExp "&&" EqExp;
LAndExp:ast::LAndExp = {
    EqExp => ast::LAndExp::EqExp(<>),
    <l_and_exp:LAndExp> "&&" <eq_exp:EqExp> => ast::LAndExp::BinaryOp(Box::new(l_and_exp),eq_exp),

};

// EqExp ::= RelExp | EqExp ("==" | "!=") RelExp;
EqExp:ast::EqExp = {
    RelExp => ast::EqExp::RelExp(<>),
    <eq_exp:EqExp> <eq_op:EqOp> <rel_exp:RelExp> => ast::EqExp::BinaryOp(Box::new(eq_exp),eq_op,rel_exp),
};

// EqOp ::= "==" | "!=";
EqOp:ast::Operator = {
    "==" => ast::Operator::Equal,
    "!=" => ast::Operator::NotEqual,
};

// RelExp ::= AddExp | RelExp ("<" | ">" | "<=" | ">=") AddExp;
RelExp:ast::RelExp = {
    AddExp => ast::RelExp::AddExp(<>),
    <rel_exp:RelExp> <rel_op:RelOp> <add_exp:AddExp> => ast::RelExp::BinaryOp(Box::new(rel_exp),rel_op,add_exp),
};

// RelOp ::= "<" | ">" | "<=" | ">=";
RelOp:ast::Operator = {
    "<" => ast::Operator::LessThan,
    ">" => ast::Operator::MoreThan,
    "<=" => ast::Operator::LessOrEqualThan,
    ">=" => ast::Operator::MoreOrEqualThan,
};

// AddExp ::= MulExp | AddExp ("+" | "-") MulExp;
AddExp:ast::AddExp = {
    MulExp => ast::AddExp::MulExp(<>),
    <add_exp:AddExp> <add_op:AddOp> <mul_exp:MulExp> => ast::AddExp::BinaryOp(Box::new(add_exp),add_op,mul_exp),
};

// AddOp ::= "+" | "-";
AddOp:ast::Operator = {
    "+" => ast::Operator::Add,
    "-" => ast::Operator::Subtract,
};

// MulExp ::= UnaryExp | MulExp ("*" | "/" | "%") UnaryExp;
MulExp:ast::MulExp = {
    UnaryExp => ast::MulExp::UnaryExp(<>),
    <mul_exp:MulExp> <mul_op:MulOp> <unary_exp:UnaryExp> => ast::MulExp::BinaryOp(Box::new(mul_exp),mul_op,unary_exp),
};

// MulOp ::= "*" | "/" | "%";
MulOp:ast::Operator = {
    "*" => ast::Operator::Multiply,
    "/" => ast::Operator::Divide,
    "%" => ast::Operator::GetRemainder,
};

// Expect: UnaryExp ::= PrimaryExp | IDENT "(" [FuncRParams] ")" | UnaryOp UnaryExp;
// Now: UnaryExp ::= PrimaryExp | UnaryOp UnaryExp;
UnaryExp:ast::UnaryExp = {
    PrimaryExp => ast::UnaryExp::PrimaryExp(<>),
    <unary_op:UnaryOp> <unary_exp:UnaryExp> => ast::UnaryExp::UnaryOp(unary_op,Box::new(unary_exp)),
};

// UnaryOp ::= "+" | "-" | "!";
UnaryOp:ast::Operator = {
    "+" => ast::Operator::Add,
    "-" => ast::Operator::Subtract,
    "!" => ast::Operator::Not,
};

// PrimaryExp ::= "(" Exp ")" | LVal | Number;
PrimaryExp:ast::PrimaryExp = {
    "(" <Exp> ")" => ast::PrimaryExp::Exp(<>),
    LVal => ast::PrimaryExp::LVal(<>),
    Number => ast::PrimaryExp::Number(<>),
};


Ident:ast::Ident = {
    r"[a-zA-Z_][a-zA-Z_0-9]*" => <>.to_string(),
};

Number:ast::Number = {
    IntConst => ast::Number::IntConst(<>),
}

IntConst:i32 = {
    r"[1-9][0-9]*" => i32::from_str_radix(<>,10).unwrap(),
    r"0[0-7]*" => i32::from_str_radix(<>,8).unwrap(),
    r"0[xX][0-9A-Fa-f]+" => i32::from_str_radix(&<>[2..],16).unwrap(),
};