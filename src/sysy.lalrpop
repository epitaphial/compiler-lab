use crate::ast;
grammar;

match {
    r"\s*"=>{},
    r"//[^\n\r]*[\n\r]*"=>{},
    r"/\*(\*[^/]|[^\*])*\*/"=>{},
    _
}

pub CompUnit:ast::CompUnit = {
    <func_def:FuncDef> => ast::CompUnit{<>},
};

FuncDef:ast::FuncDef = {
    <func_type:FuncType> <func_ident:Ident> "()" <block:Block> => ast::FuncDef{<>},
};


FuncType:ast::FuncType = {
    "int" => ast::FuncType::TypeInt,
};  

Block:ast::Block = {
    "{" <ret_stmt:RetStmt> "}" => ast::Block{<>},
};

// RetStmt ::= "return" Exp ";";
RetStmt:ast::RetStmt = {
    "return" <ret_num:Int_const> ";" => ast::RetStmt{<>},
};


Ident:String = {
    r"[a-zA-Z_][a-zA-Z_0-9]*" => <>.to_string(),
};

Int_const:i32 = {
    r"[1-9][0-9]*" => i32::from_str_radix(<>,10).unwrap(),
    r"0[0-7]*" => i32::from_str_radix(<>,8).unwrap(),
    r"0[xX][0-9A-Fa-f]+" => i32::from_str_radix(&<>[2..],16).unwrap(),
};